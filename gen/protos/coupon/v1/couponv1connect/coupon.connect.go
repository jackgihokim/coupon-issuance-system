// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protos/coupon/v1/coupon.proto

package couponv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jackgihokim/coupon-issuance-system/gen/coupon/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CouponIssuanceServiceName is the fully-qualified name of the CouponIssuanceService service.
	CouponIssuanceServiceName = "protos.coupon.v1.CouponIssuanceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CouponIssuanceServiceCreateCampaignProcedure is the fully-qualified name of the
	// CouponIssuanceService's CreateCampaign RPC.
	CouponIssuanceServiceCreateCampaignProcedure = "/protos.coupon.v1.CouponIssuanceService/CreateCampaign"
	// CouponIssuanceServiceGetCampaignProcedure is the fully-qualified name of the
	// CouponIssuanceService's GetCampaign RPC.
	CouponIssuanceServiceGetCampaignProcedure = "/protos.coupon.v1.CouponIssuanceService/GetCampaign"
	// CouponIssuanceServiceIssueCouponProcedure is the fully-qualified name of the
	// CouponIssuanceService's IssueCoupon RPC.
	CouponIssuanceServiceIssueCouponProcedure = "/protos.coupon.v1.CouponIssuanceService/IssueCoupon"
)

// CouponIssuanceServiceClient is a client for the protos.coupon.v1.CouponIssuanceService service.
type CouponIssuanceServiceClient interface {
	CreateCampaign(context.Context, *connect.Request[v1.CreateCampaignRequest]) (*connect.Response[v1.CreateCampaignResponse], error)
	GetCampaign(context.Context, *connect.Request[v1.GetCampaignRequest]) (*connect.Response[v1.GetCampaignResponse], error)
	IssueCoupon(context.Context, *connect.Request[v1.IssueCouponRequest]) (*connect.Response[v1.IssueCouponResponse], error)
}

// NewCouponIssuanceServiceClient constructs a client for the protos.coupon.v1.CouponIssuanceService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCouponIssuanceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CouponIssuanceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	couponIssuanceServiceMethods := v1.File_protos_coupon_v1_coupon_proto.Services().ByName("CouponIssuanceService").Methods()
	return &couponIssuanceServiceClient{
		createCampaign: connect.NewClient[v1.CreateCampaignRequest, v1.CreateCampaignResponse](
			httpClient,
			baseURL+CouponIssuanceServiceCreateCampaignProcedure,
			connect.WithSchema(couponIssuanceServiceMethods.ByName("CreateCampaign")),
			connect.WithClientOptions(opts...),
		),
		getCampaign: connect.NewClient[v1.GetCampaignRequest, v1.GetCampaignResponse](
			httpClient,
			baseURL+CouponIssuanceServiceGetCampaignProcedure,
			connect.WithSchema(couponIssuanceServiceMethods.ByName("GetCampaign")),
			connect.WithClientOptions(opts...),
		),
		issueCoupon: connect.NewClient[v1.IssueCouponRequest, v1.IssueCouponResponse](
			httpClient,
			baseURL+CouponIssuanceServiceIssueCouponProcedure,
			connect.WithSchema(couponIssuanceServiceMethods.ByName("IssueCoupon")),
			connect.WithClientOptions(opts...),
		),
	}
}

// couponIssuanceServiceClient implements CouponIssuanceServiceClient.
type couponIssuanceServiceClient struct {
	createCampaign *connect.Client[v1.CreateCampaignRequest, v1.CreateCampaignResponse]
	getCampaign    *connect.Client[v1.GetCampaignRequest, v1.GetCampaignResponse]
	issueCoupon    *connect.Client[v1.IssueCouponRequest, v1.IssueCouponResponse]
}

// CreateCampaign calls protos.coupon.v1.CouponIssuanceService.CreateCampaign.
func (c *couponIssuanceServiceClient) CreateCampaign(ctx context.Context, req *connect.Request[v1.CreateCampaignRequest]) (*connect.Response[v1.CreateCampaignResponse], error) {
	return c.createCampaign.CallUnary(ctx, req)
}

// GetCampaign calls protos.coupon.v1.CouponIssuanceService.GetCampaign.
func (c *couponIssuanceServiceClient) GetCampaign(ctx context.Context, req *connect.Request[v1.GetCampaignRequest]) (*connect.Response[v1.GetCampaignResponse], error) {
	return c.getCampaign.CallUnary(ctx, req)
}

// IssueCoupon calls protos.coupon.v1.CouponIssuanceService.IssueCoupon.
func (c *couponIssuanceServiceClient) IssueCoupon(ctx context.Context, req *connect.Request[v1.IssueCouponRequest]) (*connect.Response[v1.IssueCouponResponse], error) {
	return c.issueCoupon.CallUnary(ctx, req)
}

// CouponIssuanceServiceHandler is an implementation of the protos.coupon.v1.CouponIssuanceService
// service.
type CouponIssuanceServiceHandler interface {
	CreateCampaign(context.Context, *connect.Request[v1.CreateCampaignRequest]) (*connect.Response[v1.CreateCampaignResponse], error)
	GetCampaign(context.Context, *connect.Request[v1.GetCampaignRequest]) (*connect.Response[v1.GetCampaignResponse], error)
	IssueCoupon(context.Context, *connect.Request[v1.IssueCouponRequest]) (*connect.Response[v1.IssueCouponResponse], error)
}

// NewCouponIssuanceServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCouponIssuanceServiceHandler(svc CouponIssuanceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	couponIssuanceServiceMethods := v1.File_protos_coupon_v1_coupon_proto.Services().ByName("CouponIssuanceService").Methods()
	couponIssuanceServiceCreateCampaignHandler := connect.NewUnaryHandler(
		CouponIssuanceServiceCreateCampaignProcedure,
		svc.CreateCampaign,
		connect.WithSchema(couponIssuanceServiceMethods.ByName("CreateCampaign")),
		connect.WithHandlerOptions(opts...),
	)
	couponIssuanceServiceGetCampaignHandler := connect.NewUnaryHandler(
		CouponIssuanceServiceGetCampaignProcedure,
		svc.GetCampaign,
		connect.WithSchema(couponIssuanceServiceMethods.ByName("GetCampaign")),
		connect.WithHandlerOptions(opts...),
	)
	couponIssuanceServiceIssueCouponHandler := connect.NewUnaryHandler(
		CouponIssuanceServiceIssueCouponProcedure,
		svc.IssueCoupon,
		connect.WithSchema(couponIssuanceServiceMethods.ByName("IssueCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	return "/protos.coupon.v1.CouponIssuanceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CouponIssuanceServiceCreateCampaignProcedure:
			couponIssuanceServiceCreateCampaignHandler.ServeHTTP(w, r)
		case CouponIssuanceServiceGetCampaignProcedure:
			couponIssuanceServiceGetCampaignHandler.ServeHTTP(w, r)
		case CouponIssuanceServiceIssueCouponProcedure:
			couponIssuanceServiceIssueCouponHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCouponIssuanceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCouponIssuanceServiceHandler struct{}

func (UnimplementedCouponIssuanceServiceHandler) CreateCampaign(context.Context, *connect.Request[v1.CreateCampaignRequest]) (*connect.Response[v1.CreateCampaignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("protos.coupon.v1.CouponIssuanceService.CreateCampaign is not implemented"))
}

func (UnimplementedCouponIssuanceServiceHandler) GetCampaign(context.Context, *connect.Request[v1.GetCampaignRequest]) (*connect.Response[v1.GetCampaignResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("protos.coupon.v1.CouponIssuanceService.GetCampaign is not implemented"))
}

func (UnimplementedCouponIssuanceServiceHandler) IssueCoupon(context.Context, *connect.Request[v1.IssueCouponRequest]) (*connect.Response[v1.IssueCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("protos.coupon.v1.CouponIssuanceService.IssueCoupon is not implemented"))
}
